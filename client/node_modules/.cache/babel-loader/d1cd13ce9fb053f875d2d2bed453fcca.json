{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // import sessionstorage ALTERNATIVELY\n\nimport userReducer from './user/user.reducer';\nimport cartReducer from './cart/cart.reducer';\nimport directoryReducer from './directory/directory.reducer';\nconst persistConfig = {\n  key: 'root',\n  // At what point in our reducer do we want to start to persist storage\n  storage,\n  // the session we want to use sessionStorage alternatively for example\n  whitelist: ['cart'] // The reducers we want to persist (from combineReducers); we don't want to persist user as it is handled by Firebase\n\n};\nconst rootReducer = combineReducers({\n  user: userReducer,\n  cart: cartReducer,\n  directory: directoryReducer\n});\nexport default persistReducer(persistConfig, rootReducer);","map":{"version":3,"sources":["/Users/mdyankov/Courses/React/CompleteReactDeveloperUdemy/crwn-clothing/src/redux/root-reducer.js"],"names":["combineReducers","persistReducer","storage","userReducer","cartReducer","directoryReducer","persistConfig","key","whitelist","rootReducer","user","cart","directory"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,OAAP,MAAoB,2BAApB,C,CAAiD;;AAEjD,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,MADe;AACP;AACbL,EAAAA,OAFoB;AAEX;AACTM,EAAAA,SAAS,EAAE,CAAC,MAAD,CAHS,CAGA;;AAHA,CAAtB;AAMA,MAAMC,WAAW,GAAGT,eAAe,CAAC;AAClCU,EAAAA,IAAI,EAAEP,WAD4B;AAElCQ,EAAAA,IAAI,EAAEP,WAF4B;AAGlCQ,EAAAA,SAAS,EAAEP;AAHuB,CAAD,CAAnC;AAMA,eAAeJ,cAAc,CAACK,aAAD,EAAgBG,WAAhB,CAA7B","sourcesContent":["import { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // import sessionstorage ALTERNATIVELY\n\nimport userReducer from './user/user.reducer';\nimport cartReducer from './cart/cart.reducer';\nimport directoryReducer from './directory/directory.reducer';\n\nconst persistConfig = {\n  key: 'root', // At what point in our reducer do we want to start to persist storage\n  storage, // the session we want to use sessionStorage alternatively for example\n  whitelist: ['cart'] // The reducers we want to persist (from combineReducers); we don't want to persist user as it is handled by Firebase\n};\n\nconst rootReducer = combineReducers({\n  user: userReducer,\n  cart: cartReducer,\n  directory: directoryReducer\n});\n\nexport default persistReducer(persistConfig, rootReducer);\n"]},"metadata":{},"sourceType":"module"}